#summary Splitting Python standard library code for easy maintenance.
#labels TheFlow,Concept

= Introduction =

Contributing to a module in Python standard library is not as easy as it could be. This means sending patches, improving docs, reporting bugs and cleaning existing ones.

Since its birth Python language was developed as monolithic code base where core interpreter and library always come together. No clear separation from the start led to the problem of unclear standard library structure. Even with Python 3.4 on the streets it is impossible to reliably find all source code, test cases and documentation with sources related to specific module. Without this information it is impossible to contribute a patch, to automate the process, and looking for this information again and again takes more time that most of us non-core folks can afford.

Not only it is hard to find where to contribute, but also to follow the progress. You can only monitor stdlib issues, commits and patches as a whole - there is no separation per module. No wonder people are not interested to submit their modules to standard library and quickly lose motivation to support them.

There is no visibility into module development from outside. From inside you have no control over what's going on with you module issues, patches, commits, comments, docs, reviews etc. This lack of visibility also puts additional burden on tracker maintainers, restricting tracker changes to a limited subset of developers instead of supporting free-for-all edit and decentralized peer review process (like in Trac).

= Python Module Split =

To monitor changes in Python standard library on a module level, the source code of stdlib should be split into modules by grouping paths to separate files that constitute one module. It is impossible to do in the filesystem, because current grouping is made per file type - docs, c sources, python sources, and module level grouping requires them to come together. Therefore a repository needs to be added one more dimension to the filesystem - a separate mapping from module name to the related paths.

To make the grouping process automated, the stdlib layout may require some convention about canonical layout of stdlib and corresponding module files. Right now this layout is Python source code tree.

Splitting code by modules is a first step. Next one may require splitting it into separate repositories and tagging them Python release numbers (to make the size of clone smaller). Something should be done to branches for various Python versions.

The second step in this concept is to develop tools to monitor, develop, test and document modules in isolation from the rest of stdlib.

= Source Code =

Source to split stdlib into modules, with some utils for tracker is at: https://bitbucket.org/techtonik/python-stdlib